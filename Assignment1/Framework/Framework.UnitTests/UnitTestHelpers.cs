#region usings

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using Framework.Annotations;
using Framework.Extensions;

#endregion

namespace Framework.UnitTests
{

    /// <summary>
    /// Class UnitTestHelpers.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for UnitTestHelpers
    public static class UnitTestHelpers
    {

        #region class non-public fields

        [ CanBeNull ]
        private static object alwaysNull_;

        #endregion

        #region class public methods

        /// <summary>
        ///     Generates the random object enumerable with nulls.
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="custom">The custom.</param>
        /// <returns>IList&lt;System.Object&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GenerateRandomObjectEnumerableWithNulls
        [ NotNull ]
        [ ItemNotNull ]
        public static IList < object > GenerateRandomObjectEnumerableWithNulls ( [ NotNull ] [ ItemCanBeNull ] out IEnumerable target, [ NotNull ] [ ItemNotNull ] params object [ ] custom )
        {
            var expected = new List < object >
            {
                "hello",
                "world",
                1,
                false
            };
            custom.ForEach ( x =>
            {
                if ( ! ReferenceEquals ( null, x ) )
                {
                    expected.Add ( x );
                }
            } );
            target = expected.SelectMany ( y => new [ ]
            {
                null,
                y,
                null
            } );
            return expected;
        }

        #endregion

        #region class public properties

        /// <summary>
        ///     The always null
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for alwaysNull_
        [ UsedImplicitly ]
        [ CanBeNull ]
        public static object AlwaysNull
        {
            get
            {
                return alwaysNull_;
            }
            set
            {
                if ( ! ReferenceEquals ( value, alwaysNull_ ) )
                {
                    throw new InvalidOperationException ( );
                }

                alwaysNull_ = value;
            }
        }

        #endregion

    }

}
