#region usings

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Framework.Annotations;

using Xunit;

#endregion

namespace Framework.UnitTests
{

    /// <summary>
    ///     Class AnnotationExtensionsUnitTests. This class cannot be inherited.
    /// </summary>
    public static class AnnotationExtensionsUnitTests
    {

        #region class public methods

        /// <summary>
        ///     Tests that NotNull() throws exception if applied to null.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test_not_null_throws_exception_if_applied_to_null
        [ Fact ]
        public static void Test_not_null_throws_exception_if_applied_to_null ( )
        {
            var exception = Record.Exception ( ( ) => UnitTestHelpers.AlwaysNull.NotNull ( ) );
            Assert.NotNull ( exception );
            Assert.IsType < ArgumentNullException > ( exception );
        }

        /// <summary>
        ///     Tests that ToSafeEnumerable swallows nulls.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test_to_safe_enumerable_swallows_nulls
        [ Fact ]
        public static void Test_to_safe_enumerable_swallows_nulls ( )
        {
            var instance = new StringBuilder ( );
            var expected = UnitTestHelpers.GenerateRandomObjectEnumerableWithNulls ( out var target, instance );

            var actual = target.ToSafeEnumerable < object > ( );
            var asList = actual.ToList ( );

            Assert.Equal ( 0, asList.Count ( x => ReferenceEquals ( null, x ) ) );
            Assert.Equal ( expected.Count, asList.Count );
        }

        /// <summary>
        ///     Tests to safe list swallows nulls.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test_to_safe_list_swallows_nulls
        [ Fact ]
        public static void Test_to_safe_list_swallows_nulls ( )
        {
            var expected = UnitTestHelpers.GenerateRandomObjectEnumerableWithNulls ( out var target );
            var asTyped = ( ( IEnumerable < object > ) target ).ToList ( );
            var actual = asTyped.ToSafeList ( );

            Assert.Equal ( 0, actual.Count ( x => ReferenceEquals ( null, x ) ) );
            Assert.Equal ( expected.Count, actual.Count );
        }

        #endregion

    }

}
