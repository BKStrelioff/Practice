#region usings

using System;

using Framework.Annotations;

using Preferences.DomainModels;
using Preferences.Interfaces;

using Xunit;

#endregion

namespace Preferences.UnitTests
{

    /// <summary>
    ///     Class UnitTestHelpers.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for UnitTestHelpers
    public static class UnitTestHelpers
    {

        #region class public methods

        /// <summary>
        ///     Asserts the record is shallow copy.
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="added">The added.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AssertRecordIsShallowCopy
        public static void AssertRecordIsShallowCopy ( [ NotNull ] PersonColorPreferenceModel target, [ NotNull ] IPersonColorPreferenceModel added )
        {
            // Record must have been copied
            Assert.False ( ReferenceEquals ( target, added ) );

            Assert.True ( ReferenceEquals ( added.FavoriteColor, target.FavoriteColor ) );
            Assert.True ( ReferenceEquals ( added.FirstName, target.FirstName ) );
            Assert.True ( ReferenceEquals ( added.Gender, target.Gender ) );
            Assert.True ( ReferenceEquals ( added.LastName, target.LastName ) );
            Assert.True ( ReferenceEquals ( added.DateOfBirth, target.DateOfBirth ) );

            //Assert.Equal ( added.DateTimeBirth, target.DateTimeBirth );
            //Assert.Equal ( added.LastNameUpper, target.LastNameUpper );
            //Assert.Equal ( added.FirstNameUpper, target.FirstNameUpper );
        }


        /// <summary>
        /// Asserts the record identical.
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="added">The added.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AssertRecordIdentical
        public static void AssertRecordIdentical ([NotNull] PersonColorPreferenceModel target, [NotNull] IPersonColorPreferenceModel added)
        {
            // Record must have been copied
            Assert.False(ReferenceEquals(target, added));

            Assert.Equal(added.FavoriteColor, target.FavoriteColor);
            Assert.Equal(added.FirstName, target.FirstName);
            Assert.Equal(added.Gender, target.Gender);
            Assert.Equal(added.LastName, target.LastName);
            Assert.Equal(added.DateOfBirth, target.DateOfBirth);

        }

        #endregion

        /// <summary>
        /// Generates the line.
        /// </summary>
        /// <param name="source">The new record.</param>
        /// <param name="separatorChar">The separator character.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GenerateLine
        [NotNull]
        public static string GenerateLine ( [ NotNull ] PersonColorPreferenceModel source, char separatorChar )
        {
            string joiner;
            if ( separatorChar == '|' )
            {
                joiner = " " + separatorChar + " ";
            }
            else if ( separatorChar == ',' )
            {
                joiner = ", ";
            }
            else
            {
                joiner = separatorChar + "";
            }

            var asLine = String.Join ( joiner, source.LastName, source.FirstName, source.Gender, source.FavoriteColor, source.DateOfBirth );
            return asLine;
        }

    }

}
