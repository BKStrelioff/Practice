#region usings

using System.Collections.Generic;
using System.Linq;

using Framework.Annotations;

using Preferences.Interfaces;

#endregion

namespace Preferences.DataObjects
{
    /// <summary>
    /// These extensions provide a more generic way to populate similar 
    /// instances from each other.
    /// </summary>
    public static class MappingExtensions
    {

        #region class public methods

        /// <summary>
        /// Supports mapping all items in an IEnumerable from one type to another.
        /// </summary>
        /// <typeparam name="TTo">The type of the t to.</typeparam>
        /// <param name="source">The source.</param>
        /// <returns>IEnumerable&lt;TTo&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for To`1
        [NotNull ]
        [ ItemNotNull ]
        public static IEnumerable < TTo > To <  TTo > ( [ NotNull ] [ ItemNotNull ] this IEnumerable <IPersonColorPreferenceModel> source )
            where TTo : class, IPersonColorPreferenceModel, new ( )
        {
            var result = source.Select ( r => r.To < TTo > ( ) ).ToList ( );

            return result;
        }

        /// <summary>
        /// Supports mapping all items in an instance from one type to another.
        /// </summary>
        /// <typeparam name="TTo">The type of the t to.</typeparam>
        /// <param name="source">The source.</param>
        /// <returns>TTo.</returns>
        [NotNull ]
        public static TTo To < TTo > ( [ NotNull ] this IPersonColorPreferenceModel source )
            where TTo : class, IPersonColorPreferenceModel, new ( )
        {
            var result = new TTo ( );
            result.PopulateFrom ( source );

            return result;
        }

        #endregion

    }

}
